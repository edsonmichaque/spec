{{>partial_header}}
package {{packageName}}

import (
	"context"
	"fmt"
	"net/http"
	"strings"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes an oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKeys takes a string apikey as authentication for the request
	ContextAPIKeys = contextKey("apiKeys")

	{{#withAWSV4Signature}}
	// ContextAWSv4 takes an Access Key and a Secret Key for signing AWS Signature v4
	ContextAWSv4 = contextKey("awsv4")

	{{/withAWSV4Signature}}
	// ContextHttpSignatureAuth takes HttpSignatureAuth as authentication for the request.
	ContextHttpSignatureAuth = contextKey("httpsignature")

	// ContextServerIndex uses a server configuration from the index.
	ContextServerIndex = contextKey("serverIndex")

	// ContextOperationServerIndices uses a server configuration from the index mapping.
	ContextOperationServerIndices = contextKey("serverOperationIndices")

	// ContextServerVariables overrides a server configuration variables.
	ContextServerVariables = contextKey("serverVariables")

	// ContextOperationServerVariables overrides a server configuration variables using operation specific values.
	ContextOperationServerVariables = contextKey("serverOperationVariables")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	Username string `json:"username,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

{{#withAWSV4Signature}}
// AWSv4 provides AWS Signature to a request passed via context using ContextAWSv4
// https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
type AWSv4 struct {
	AccessKey string
	SecretKey string
	SessionToken string
	Region string
	Service string
}

{{/withAWSV4Signature}}

{{#withCustomMiddlewareFunction}}
// MiddlewareFunction provides way to implement custom middleware
type MiddlewareFunction func(*http.Request)

{{/withCustomMiddlewareFunction}}
// Configuration stores the configuration of the API client
type Configuration struct {
	Host             string            `json:"host,omitempty"`
	Scheme           string            `json:"scheme,omitempty"`
	DefaultHeader    map[string]string `json:"defaultHeader,omitempty"`
	UserAgent        string            `json:"userAgent,omitempty"`
	Debug            bool              `json:"debug,omitempty"`
	HTTPClient       *http.Client
    {{#withCustomMiddlewareFunction}}
	Middleware       MiddlewareFunction
    {{/withCustomMiddlewareFunction}}
    BaseURL string
}

type Option func(*Configuration)

func WithUserAgent(ua string) Option {
     return func(c *Configuration) {
            c.UserAgent = ua
     }
}

func WithBaseURL(base string) Option {
     return func(c *Configuration) {
            c.BaseURL = base
     }
}

// NewConfiguration returns a new Configuration object
func NewConfiguration(opts ...Option) *Configuration {
	cfg := &Configuration{
		DefaultHeader:    make(map[string]string),
		UserAgent:        "{{{httpUserAgent}}}{{^httpUserAgent}}thunes-mt/{{{packageVersion}}}/go{{/httpUserAgent}}",
		Debug:            false,
        {{#servers}}
        {{#-first}}
        BaseURL: "{{{URL}}}",
        {{/-first}}
        {{/servers}}
	}

    for _, opt := range opts {
        opt(cfg)
    }

	return cfg
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

