// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	"fmt"
	"strings"
	

	"github.com/danielgtaylor/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)







var openapi.YmlSubcommand bool

func openapi.YmlServers() []map[string]string {
	return []map[string]string{
		
			map[string]string{
				"description": "",
				"url": "https://petstore3.swagger.io",
			},
		
	}
}


	// Openapi.YmlGetBalance Get balance
	func Openapi.YmlGetBalance(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "get-balance"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/balance"

		req := cli.Client.Get().URL(url)

		

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.YmlGetBeneficiary Get beneficiary
	func Openapi.YmlGetBeneficiary(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "get-beneficiary"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/beneficiaries"

		req := cli.Client.Get().URL(url)

		
			paramMsisdn := params.GetString("msisdn")
			if paramMsisdn != "" {
					req = req.AddQuery("msisdn", fmt.Sprintf("%v", paramMsisdn))
			}
			paramAccountNumber := params.GetString("account-number")
			if paramAccountNumber != "" {
					req = req.AddQuery("account_number", fmt.Sprintf("%v", paramAccountNumber))
			}

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.YmlValidateBeneficiary Validate beneficiary
	func Openapi.YmlValidateBeneficiary(params *viper.Viper) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "validate-beneficiary"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/beneficiaries/validation"

		req := cli.Client.Get().URL(url)

		
			paramMsisdn := params.GetString("msisdn")
			if paramMsisdn != "" {
					req = req.AddQuery("msisdn", fmt.Sprintf("%v", paramMsisdn))
			}
			paramAccountNumber := params.GetString("account-number")
			if paramAccountNumber != "" {
					req = req.AddQuery("account_number", fmt.Sprintf("%v", paramAccountNumber))
			}

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.YmlListTransfers List transfer
	func Openapi.YmlListTransfers(params *viper.Viper) (*gentleman.Response, interface{}, error) {
		handlerPath := "list-transfers"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/transfers"

		req := cli.Client.Get().URL(url)

		
			paramStatus := params.GetString("status")
			if paramStatus != "" {
					req = req.AddQuery("status", fmt.Sprintf("%v", paramStatus))
			}

		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after
		}

		return resp, decoded, nil
	}

	// Openapi.YmlCreateTransfer Create transfer
	func Openapi.YmlCreateTransfer(params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "create-transfer"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/transfers"

		req := cli.Client.Post().URL(url)

		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "application/json").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.YmlGetTransfer Get transfer
	func Openapi.YmlGetTransfer(paramTransferid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "get-transfer"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/transfers/{transferId}"
				url = strings.Replace(url, "{transferId}", paramTransferid, 1)

		req := cli.Client.Post().URL(url)

		
			
		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.YmlCancelTransfer Cancel transfer
	func Openapi.YmlCancelTransfer(paramTransferid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "cancel-transfer"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/transfers/{transferId}/cancel"
				url = strings.Replace(url, "{transferId}", paramTransferid, 1)

		req := cli.Client.Post().URL(url)

		
			
		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}

	// Openapi.YmlConfirmTransfer Confirm transfer
	func Openapi.YmlConfirmTransfer(paramTransferid string, params *viper.Viper, body string) (*gentleman.Response, map[string]interface{}, error) {
		handlerPath := "confirm-transfer"
		if openapi.YmlSubcommand {
			handlerPath = "openapi.yml " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = openapi.YmlServers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"/v1/transfers/{transferId}/confirm"
				url = strings.Replace(url, "{transferId}", paramTransferid, 1)

		req := cli.Client.Post().URL(url)

		
			
		

		
			if body != "" {
				req = req.AddHeader("Content-Type", "").BodyString(body)
			}
		

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded map[string]interface{}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after.(map[string]interface{})
		}

		return resp, decoded, nil
	}




func openapi.YmlRegister(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use: "openapi.yml",
			Short: "Swagger Petstore - OpenAPI 3.0",
			Long: cli.Markdown("This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)"),
		}
		openapi.YmlSubcommand = true
	} else {
		cli.Root.Short = "Swagger Petstore - OpenAPI 3.0"
		cli.Root.Long = cli.Markdown("This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)")
	}

	

	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "get-balance",
				Short: "Get balance",
				Long: cli.Markdown("Get balance"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.YmlGetBalance(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "get-beneficiary",
				Short: "Get beneficiary",
				Long: cli.Markdown("Get beneficiary"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.YmlGetBeneficiary(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			
			cmd.Flags().String("msisdn", "", "")
			cmd.Flags().String("account-number", "", "")

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "validate-beneficiary",
				Short: "Validate beneficiary",
				Long: cli.Markdown("Validate beneficiary"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.YmlValidateBeneficiary(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			
			cmd.Flags().String("msisdn", "", "")
			cmd.Flags().String("account-number", "", "")

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "list-transfers",
				Short: "List transfer",
				Long: cli.Markdown("List transfer"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {

					_, decoded, err := Openapi.YmlListTransfers(params)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			
			cmd.Flags().String("status", "", "")

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "create-transfer",
				Short: "Create transfer",
				Long: cli.Markdown("Create transfer\n## Request Schema (application/json)\n\nproperties:\n  amount:\n    $ref: '#/components/schemas/Amount'\n  destination:\n    $ref: '#/components/schemas/Destination'\n  source:\n    $ref: '#/components/schemas/Source'\ntype: object\n"),
				Example: examples,
				Args: cobra.MinimumNArgs(0),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("application/json", args[0:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.YmlCreateTransfer(params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "get-transfer transferid",
				Short: "Get transfer",
				Long: cli.Markdown("Get transfer"),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("", args[1:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.YmlGetTransfer(args[0], params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "cancel-transfer transferid",
				Short: "Cancel transfer",
				Long: cli.Markdown("Cancel transfer"),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("", args[1:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.YmlCancelTransfer(args[0], params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
		func () {
			params := viper.New()

			var examples string

			

			cmd := &cobra.Command{
				Use: "confirm-transfer transferid",
				Short: "Confirm transfer",
				Long: cli.Markdown("Confirm transfer"),
				Example: examples,
				Args: cobra.MinimumNArgs(1),
				Run: func(cmd *cobra.Command, args []string) {
					body, err := cli.GetBody("", args[1:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}

					_, decoded, err := Openapi.YmlConfirmTransfer(args[0], params, body)
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					
				},
			}
			root.AddCommand(cmd)

			

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}

		}()
	
}
